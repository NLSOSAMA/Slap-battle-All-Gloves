NotWorkingGlove = { -- these glove can't be used with this script 
	"Error",
	"CUSTOM"
}
-- All glove except titan will be save in ur inventory, equip in ur inventory 

GetAllGlove = true --[[ executing this will erase your hiteffect have same name as a glove like: Hunter, Relude, fish, ðŸ—¿, ....  BECAREFUL!, Or you can just add hit effect you need to hold/keep in the list on top]]-- 
GetGamepassGlove = false
GloveWanted = "Titan" --[[ if u set this to value same as a hit effect then it will erase your hit effect have the same name as the value u put. ]]-- 
GetWantedGlove = true


if GetAllGlove == true and NotWorkingGlove then
    for i, glove in pairs(game.Workspace.Lobby:GetChildren()) do
        if not table.find(NotWorkingGlove, glove.Name) then
            for i, v in pairs(game:GetService("ReplicatedStorage")._NETWORK:GetChildren()) do
                if v.Name:find("{") then
                    local args = {
                        [1] = glove.Name
                    }
                    
                    if v:IsA("RemoteEvent") then
                        v:FireServer(unpack(args))
                    elseif v:IsA("RemoteFunction") then
                        local result = v:InvokeServer(unpack(args))
                        print("Result from InvokeServer:", result)
                    else
                        print("v is neither a RemoteEvent nor a RemoteFunction.")
                    end
                end
            end
        end
    end
end

if GetGamepassGlove == true then
local GamepassGlove = {"OVERKILL", "Acrobat", "Spectator", "Titan", "Ultra Instinct"}
	for i = 1,#GamepassGlove do
		for i, v in pairs(game:GetService("ReplicatedStorage")._NETWORK:GetChildren()) do
		    -- Check if the name contains the character '{'
		    if v.Name:find("{") then
		        local args = {
		            [1] = GamepassGlove[i]
		        }
		
		        -- Check if v is a RemoteEvent and can FireServer
		        if v:IsA("RemoteEvent") then
		            v:FireServer(unpack(args))
		        elseif v:IsA("RemoteFunction") then
		            -- If it's a RemoteFunction, use InvokeServer
		            local result = v:InvokeServer(unpack(args))
		            print("Result from InvokeServer:", result)  -- Optional: Print the result
		        else
		            print("v is neither a RemoteEvent nor a RemoteFunction.")
		        end
		    end
		end
	end
end
if GloveWanted and GetWantedGlove == true then
	for i, v in pairs(game:GetService("ReplicatedStorage")._NETWORK:GetChildren()) do
	    -- Check if the name contains the character '{'
	    if v.Name:find("{") then
	        local args = {
	            [1] = GloveWanted
	        }
	
	        -- Check if v is a RemoteEvent and can FireServer
	        if v:IsA("RemoteEvent") then
	            v:FireServer(unpack(args))
	        elseif v:IsA("RemoteFunction") then
	            -- If it's a RemoteFunction, use InvokeServer
	            local result = v:InvokeServer(unpack(args))
	            print("Result from InvokeServer:", result)  -- Optional: Print the result
	        else
	            print("v is neither a RemoteEvent nor a RemoteFunction.")
	        end
	    end
	end
end
